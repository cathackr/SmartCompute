# SmartCompute Production Docker Compose
# Based on post-audit recommendations for hardening and production readiness

version: '3.8'

services:
  smartcompute:
    build: 
      context: .
      dockerfile: Dockerfile.prod
      target: production
    container_name: smartcompute_app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartcompute_backend
      - smartcompute_frontend
    environment:
      - DATABASE_URL=postgresql://smartcompute:${DB_PASSWORD}@postgres:5432/smartcompute
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - DB_ENCRYPTION_KEY=${DB_ENCRYPTION_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - smartcompute_data:/app/data
      - smartcompute_logs:/app/logs
      - smartcompute_reports:/app/reports
      - ./certs:/certs:ro  # TLS certificates
    secrets:
      - jwt_secret
      - db_encryption_key
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'

  postgres:
    image: postgres:15-alpine
    container_name: smartcompute_postgres
    restart: unless-stopped
    networks:
      - smartcompute_backend
    environment:
      - POSTGRES_DB=smartcompute
      - POSTGRES_USER=smartcompute
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartcompute -d smartcompute"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.1'

  redis:
    image: redis:7-alpine
    container_name: smartcompute_redis
    restart: unless-stopped
    networks:
      - smartcompute_backend
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'

  nginx:
    image: nginx:alpine
    container_name: smartcompute_nginx
    restart: unless-stopped
    depends_on:
      - smartcompute
    networks:
      - smartcompute_frontend
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Monitoring and logging (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: smartcompute_prometheus
    restart: unless-stopped
    networks:
      - smartcompute_backend
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: smartcompute_grafana
    restart: unless-stopped
    networks:
      - smartcompute_backend
      - smartcompute_frontend
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "127.0.0.1:3000:3000"
    profiles:
      - monitoring

networks:
  smartcompute_backend:
    driver: bridge
    internal: true  # Backend network is isolated
  smartcompute_frontend:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  smartcompute_data:
    driver: local
  smartcompute_logs:
    driver: local
  smartcompute_reports:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

secrets:
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  db_encryption_key:
    file: ./secrets/db_encryption_key.txt