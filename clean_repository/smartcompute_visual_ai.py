#!/usr/bin/env python3
"""
SmartCompute Industrial - IA de An√°lisis Visual
Desarrollado por: ggwre04p0@mozmail.com
LinkedIn: https://www.linkedin.com/in/mart√≠n-iribarne-swtf/

Sistema de an√°lisis visual avanzado para diagn√≥stico de equipos industriales
utilizando m√∫ltiples modelos de IA y t√©cnicas de visi√≥n por computador.
"""

import cv2
import numpy as np
import json
import time
from datetime import datetime
from pathlib import Path
from dataclasses import dataclass, asdict
from typing import Dict, List, Optional, Any, Tuple
import base64
import io
from PIL import Image, ImageDraw, ImageFont
import hashlib

@dataclass
class VisualElement:
    element_type: str  # "led", "display", "cable", "label", "connector"
    coordinates: Tuple[int, int, int, int]  # x1, y1, x2, y2
    confidence: float
    properties: Dict[str, Any]  # color, state, text, etc.

@dataclass
class EquipmentIdentification:
    manufacturer: str
    model: str
    serial_number: Optional[str]
    equipment_type: str
    confidence: float
    identification_method: str  # "label_ocr", "visual_features", "qr_code"

@dataclass
class VisualDiagnostic:
    diagnostic_id: str
    image_path: str
    analysis_timestamp: datetime
    equipment_identified: Optional[EquipmentIdentification]
    visual_elements: List[VisualElement]
    anomalies_detected: List[Dict[str, Any]]
    status_indicators: Dict[str, str]
    recommended_actions: List[str]
    confidence_overall: float
    processing_time: float

class SmartComputeVisualAI:
    """
    Sistema de IA para an√°lisis visual de equipos industriales
    """

    def __init__(self):
        self.equipment_templates = self._load_equipment_templates()
        self.led_color_ranges = self._define_led_color_ranges()
        self.text_patterns = self._load_text_patterns()
        self.anomaly_detectors = self._initialize_anomaly_detectors()

    def _load_equipment_templates(self) -> Dict[str, Any]:
        """Cargar plantillas de equipos conocidos"""
        return {
            "siemens_s7_1200": {
                "manufacturer": "Siemens",
                "model_prefix": "S7-12",
                "typical_dimensions": (100, 75),  # width, height ratio
                "led_positions": {
                    "power": (0.1, 0.2),  # relative positions
                    "error": (0.1, 0.4),
                    "comm": (0.1, 0.6)
                },
                "display_area": (0.3, 0.1, 0.9, 0.8),  # relative area
                "label_area": (0.0, 0.85, 1.0, 1.0)
            },
            "allen_bradley_compactlogix": {
                "manufacturer": "Allen-Bradley",
                "model_prefix": "CompactLogix",
                "typical_dimensions": (120, 85),
                "led_positions": {
                    "power": (0.05, 0.1),
                    "fault": (0.05, 0.3),
                    "force": (0.05, 0.5)
                },
                "display_area": (0.2, 0.0, 1.0, 0.7),
                "label_area": (0.0, 0.8, 1.0, 1.0)
            }
        }

    def _define_led_color_ranges(self) -> Dict[str, Tuple[np.ndarray, np.ndarray]]:
        """Definir rangos de color para LEDs en HSV"""
        return {
            "green": (np.array([40, 50, 50]), np.array([80, 255, 255])),
            "red": (np.array([0, 50, 50]), np.array([20, 255, 255])),
            "orange": (np.array([20, 50, 50]), np.array([40, 255, 255])),
            "blue": (np.array([100, 50, 50]), np.array([130, 255, 255])),
            "yellow": (np.array([25, 50, 50]), np.array([35, 255, 255]))
        }

    def _load_text_patterns(self) -> Dict[str, str]:
        """Cargar patrones de texto para reconocimiento"""
        return {
            "siemens_model": r"S7-\d{4}[A-Z]*",
            "ip_address": r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}",
            "mac_address": r"([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})",
            "serial_number": r"[A-Z0-9]{8,16}",
            "error_code": r"[A-Z]\d{4}",
            "voltage": r"\d+V",
            "current": r"\d+\.?\d*A"
        }

    def _initialize_anomaly_detectors(self) -> Dict[str, Any]:
        """Inicializar detectores de anomal√≠as"""
        return {
            "overheating": {
                "thermal_signature": "high_temperature_zones",
                "visual_indicators": ["discoloration", "smoke", "melting"]
            },
            "corrosion": {
                "color_patterns": ["rust_colors", "green_oxidation"],
                "texture_analysis": "surface_roughness"
            },
            "physical_damage": {
                "edge_detection": "broken_edges",
                "shape_analysis": "deformed_components"
            },
            "loose_connections": {
                "gap_detection": "unexpected_spaces",
                "alignment_check": "misaligned_components"
            }
        }

    def analyze_image(self, image_path: str, expected_equipment: str = None) -> VisualDiagnostic:
        """An√°lisis principal de imagen"""
        start_time = time.time()

        print(f"üîç Analizando imagen: {Path(image_path).name}")

        # Cargar imagen
        image = cv2.imread(image_path)
        if image is None:
            raise ValueError(f"No se pudo cargar la imagen: {image_path}")

        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

        # 1. Identificar equipo
        equipment_id = self._identify_equipment(image_rgb, expected_equipment)

        # 2. Detectar elementos visuales
        visual_elements = self._detect_visual_elements(image_rgb, image_hsv, equipment_id)

        # 3. Analizar indicadores de estado
        status_indicators = self._analyze_status_indicators(visual_elements, equipment_id)

        # 4. Detectar anomal√≠as
        anomalies = self._detect_anomalies(image_rgb, image_hsv, equipment_id)

        # 5. Generar recomendaciones
        recommendations = self._generate_visual_recommendations(
            equipment_id, status_indicators, anomalies
        )

        # 6. Calcular confianza general
        overall_confidence = self._calculate_overall_confidence(
            equipment_id, visual_elements, status_indicators, anomalies
        )

        processing_time = time.time() - start_time

        diagnostic = VisualDiagnostic(
            diagnostic_id=f"VD-{int(time.time())}-{hashlib.md5(image_path.encode()).hexdigest()[:8]}",
            image_path=image_path,
            analysis_timestamp=datetime.now(),
            equipment_identified=equipment_id,
            visual_elements=visual_elements,
            anomalies_detected=anomalies,
            status_indicators=status_indicators,
            recommended_actions=recommendations,
            confidence_overall=overall_confidence,
            processing_time=processing_time
        )

        print(f"‚úÖ An√°lisis completado en {processing_time:.2f}s (confianza: {overall_confidence:.1%})")

        return diagnostic

    def _identify_equipment(self, image: np.ndarray, expected: str = None) -> Optional[EquipmentIdentification]:
        """Identificar equipo en la imagen"""
        print("  üîé Identificando equipo...")

        # Simulaci√≥n de identificaci√≥n basada en templates
        if expected and "siemens" in expected.lower():
            return EquipmentIdentification(
                manufacturer="Siemens",
                model="S7-1214C DC/DC/DC",
                serial_number="6ES7214-1AG40-0XB0",
                equipment_type="PLC",
                confidence=0.92,
                identification_method="visual_features"
            )
        elif expected and "allen" in expected.lower():
            return EquipmentIdentification(
                manufacturer="Allen-Bradley",
                model="1769-L24ER-QB1B",
                serial_number="AB12345678",
                equipment_type="PLC",
                confidence=0.88,
                identification_method="label_ocr"
            )
        else:
            # An√°lisis gen√©rico
            return EquipmentIdentification(
                manufacturer="Generic",
                model="Industrial Controller",
                serial_number=None,
                equipment_type="Control Device",
                confidence=0.65,
                identification_method="visual_features"
            )

    def _detect_visual_elements(self, image_rgb: np.ndarray, image_hsv: np.ndarray,
                              equipment: Optional[EquipmentIdentification]) -> List[VisualElement]:
        """Detectar elementos visuales en la imagen"""
        print("  üîé Detectando elementos visuales...")

        elements = []

        # Detectar LEDs
        led_elements = self._detect_leds(image_hsv)
        elements.extend(led_elements)

        # Detectar displays
        display_elements = self._detect_displays(image_rgb)
        elements.extend(display_elements)

        # Detectar cables y conectores
        connector_elements = self._detect_connectors(image_rgb)
        elements.extend(connector_elements)

        # Detectar etiquetas y texto
        label_elements = self._detect_labels(image_rgb)
        elements.extend(label_elements)

        return elements

    def _detect_leds(self, image_hsv: np.ndarray) -> List[VisualElement]:
        """Detectar LEDs y determinar su color/estado"""
        leds = []

        for color_name, (lower, upper) in self.led_color_ranges.items():
            # Crear m√°scara para el color
            mask = cv2.inRange(image_hsv, lower, upper)

            # Encontrar contornos
            contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

            for contour in contours:
                area = cv2.contourArea(contour)
                if 20 < area < 500:  # Tama√±o t√≠pico de LED
                    x, y, w, h = cv2.boundingRect(contour)

                    # Verificar que sea aproximadamente circular
                    aspect_ratio = w / h
                    if 0.7 < aspect_ratio < 1.3:
                        leds.append(VisualElement(
                            element_type="led",
                            coordinates=(x, y, x + w, y + h),
                            confidence=0.85,
                            properties={
                                "color": color_name,
                                "state": "on",
                                "area": area,
                                "brightness": "normal"
                            }
                        ))

        return leds

    def _detect_displays(self, image_rgb: np.ndarray) -> List[VisualElement]:
        """Detectar pantallas y displays"""
        displays = []

        # Convertir a escala de grises
        gray = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2GRAY)

        # Detectar √°reas rectangulares que podr√≠an ser displays
        edges = cv2.Canny(gray, 50, 150)
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        for contour in contours:
            area = cv2.contourArea(contour)
            if area > 1000:  # √Årea m√≠nima para un display
                x, y, w, h = cv2.boundingRect(contour)
                aspect_ratio = w / h

                # Los displays suelen tener ciertas proporciones
                if 1.5 < aspect_ratio < 4.0:
                    displays.append(VisualElement(
                        element_type="display",
                        coordinates=(x, y, x + w, y + h),
                        confidence=0.75,
                        properties={
                            "type": "lcd",
                            "aspect_ratio": aspect_ratio,
                            "area": area,
                            "text_detected": False
                        }
                    ))

        return displays

    def _detect_connectors(self, image_rgb: np.ndarray) -> List[VisualElement]:
        """Detectar conectores y cables"""
        connectors = []

        # Simulaci√≥n de detecci√≥n de conectores
        # En implementaci√≥n real se usar√≠an t√©cnicas de detecci√≥n de forma
        gray = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2GRAY)
        edges = cv2.Canny(gray, 30, 100)

        # Detectar c√≠rculos (conectores circulares)
        circles = cv2.HoughCircles(
            gray, cv2.HOUGH_GRADIENT, 1, 20,
            param1=50, param2=30, minRadius=5, maxRadius=30
        )

        if circles is not None:
            circles = np.round(circles[0, :]).astype("int")
            for (x, y, r) in circles:
                connectors.append(VisualElement(
                    element_type="connector",
                    coordinates=(x - r, y - r, x + r, y + r),
                    confidence=0.70,
                    properties={
                        "type": "circular",
                        "radius": r,
                        "connection_status": "unknown"
                    }
                ))

        return connectors

    def _detect_labels(self, image_rgb: np.ndarray) -> List[VisualElement]:
        """Detectar etiquetas y texto"""
        labels = []

        # Simulaci√≥n de OCR (en implementaci√≥n real usar√≠amos Tesseract)
        # Aqu√≠ simularemos la detecci√≥n de algunas etiquetas t√≠picas

        height, width = image_rgb.shape[:2]

        # Simular detecci√≥n de etiqueta en parte inferior
        labels.append(VisualElement(
            element_type="label",
            coordinates=(int(width * 0.1), int(height * 0.85), int(width * 0.9), int(height * 0.95)),
            confidence=0.88,
            properties={
                "text": "S7-1214C DC/DC/DC",
                "font_size": "medium",
                "text_type": "model_number"
            }
        ))

        return labels

    def _analyze_status_indicators(self, elements: List[VisualElement],
                                 equipment: Optional[EquipmentIdentification]) -> Dict[str, str]:
        """Analizar indicadores de estado basado en elementos detectados"""
        status = {
            "power": "unknown",
            "communication": "unknown",
            "error": "unknown",
            "overall": "unknown"
        }

        # Analizar LEDs para determinar estado
        for element in elements:
            if element.element_type == "led":
                color = element.properties.get("color", "unknown")

                # Mapear colores a estados seg√∫n posici√≥n aproximada
                y_pos = element.coordinates[1]
                image_height = 480  # Asumir altura est√°ndar

                # LED superior (power)
                if y_pos < image_height * 0.3:
                    if color == "green":
                        status["power"] = "normal"
                    elif color == "red":
                        status["power"] = "fault"
                    elif color == "orange":
                        status["power"] = "warning"

                # LED medio (communication)
                elif y_pos < image_height * 0.6:
                    if color == "green":
                        status["communication"] = "connected"
                    elif color == "red":
                        status["communication"] = "disconnected"
                    elif color == "orange":
                        status["communication"] = "limited"

                # LED inferior (error)
                else:
                    if color == "red":
                        status["error"] = "active"
                    elif color == "green":
                        status["error"] = "none"
                    elif color == "orange":
                        status["error"] = "warning"

        # Determinar estado general
        if status["power"] == "fault" or status["error"] == "active":
            status["overall"] = "fault"
        elif status["power"] == "warning" or status["communication"] == "limited":
            status["overall"] = "warning"
        elif status["power"] == "normal" and status["communication"] == "connected":
            status["overall"] = "normal"
        else:
            status["overall"] = "unknown"

        return status

    def _detect_anomalies(self, image_rgb: np.ndarray, image_hsv: np.ndarray,
                         equipment: Optional[EquipmentIdentification]) -> List[Dict[str, Any]]:
        """Detectar anomal√≠as visuales"""
        anomalies = []

        # Detectar sobrecalentamiento (colores inusuales)
        heat_anomaly = self._detect_overheating_signs(image_hsv)
        if heat_anomaly:
            anomalies.append(heat_anomaly)

        # Detectar da√±o f√≠sico
        damage_anomaly = self._detect_physical_damage(image_rgb)
        if damage_anomaly:
            anomalies.append(damage_anomaly)

        # Detectar corrosi√≥n
        corrosion_anomaly = self._detect_corrosion(image_hsv)
        if corrosion_anomaly:
            anomalies.append(corrosion_anomaly)

        return anomalies

    def _detect_overheating_signs(self, image_hsv: np.ndarray) -> Optional[Dict[str, Any]]:
        """Detectar signos de sobrecalentamiento"""
        # Buscar √°reas con decoloraci√≥n por calor
        heat_range_lower = np.array([10, 100, 100])  # Amarillo/naranja
        heat_range_upper = np.array([25, 255, 255])

        mask = cv2.inRange(image_hsv, heat_range_lower, heat_range_upper)
        heat_area = cv2.countNonZero(mask)

        if heat_area > 500:  # Umbral para √°rea significativa
            return {
                "type": "overheating",
                "severity": "medium",
                "confidence": 0.72,
                "description": "Posible decoloraci√≥n por temperatura elevada",
                "affected_area": heat_area
            }

        return None

    def _detect_physical_damage(self, image_rgb: np.ndarray) -> Optional[Dict[str, Any]]:
        """Detectar da√±o f√≠sico visible"""
        gray = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2GRAY)
        edges = cv2.Canny(gray, 50, 150)

        # Detectar l√≠neas an√≥malas que podr√≠an indicar grietas
        lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=50, minLineLength=30, maxLineGap=10)

        if lines is not None and len(lines) > 20:  # Muchas l√≠neas pueden indicar da√±o
            return {
                "type": "physical_damage",
                "severity": "low",
                "confidence": 0.65,
                "description": "Patrones de l√≠neas an√≥malas detectados",
                "line_count": len(lines)
            }

        return None

    def _detect_corrosion(self, image_hsv: np.ndarray) -> Optional[Dict[str, Any]]:
        """Detectar signos de corrosi√≥n"""
        # Buscar colores t√≠picos de oxidaci√≥n
        rust_range_lower = np.array([5, 50, 50])   # Marr√≥n/√≥xido
        rust_range_upper = np.array([15, 255, 255])

        mask = cv2.inRange(image_hsv, rust_range_lower, rust_range_upper)
        rust_area = cv2.countNonZero(mask)

        if rust_area > 200:
            return {
                "type": "corrosion",
                "severity": "medium",
                "confidence": 0.68,
                "description": "Posibles signos de oxidaci√≥n detectados",
                "affected_area": rust_area
            }

        return None

    def _generate_visual_recommendations(self, equipment: Optional[EquipmentIdentification],
                                       status: Dict[str, str],
                                       anomalies: List[Dict[str, Any]]) -> List[str]:
        """Generar recomendaciones basadas en an√°lisis visual"""
        recommendations = []

        # Recomendaciones basadas en estado
        if status["power"] == "fault":
            recommendations.append("Verificar alimentaci√≥n el√©ctrica del equipo")
            recommendations.append("Revisar fusibles y protecciones")

        if status["communication"] == "disconnected":
            recommendations.append("Verificar conexi√≥n de red/comunicaci√≥n")
            recommendations.append("Comprobar cables de comunicaci√≥n")

        if status["error"] == "active":
            recommendations.append("Consultar manual de c√≥digos de error")
            recommendations.append("Revisar logs de eventos del equipo")

        # Recomendaciones basadas en anomal√≠as
        for anomaly in anomalies:
            if anomaly["type"] == "overheating":
                recommendations.append("Verificar ventilaci√≥n y temperatura ambiente")
                recommendations.append("Inspeccionar sistema de refrigeraci√≥n")

            elif anomaly["type"] == "physical_damage":
                recommendations.append("Inspecci√≥n f√≠sica detallada requerida")
                recommendations.append("Considerar reemplazo si hay da√±o estructural")

            elif anomaly["type"] == "corrosion":
                recommendations.append("Limpiar √°reas afectadas por corrosi√≥n")
                recommendations.append("Aplicar tratamiento anticorrosivo")

        # Recomendaci√≥n general
        if not recommendations:
            recommendations.append("Equipo aparenta estado normal - continuar monitoreo")

        return recommendations

    def _calculate_overall_confidence(self, equipment: Optional[EquipmentIdentification],
                                    elements: List[VisualElement],
                                    status: Dict[str, str],
                                    anomalies: List[Dict[str, Any]]) -> float:
        """Calcular confianza general del an√°lisis"""
        confidence_factors = []

        # Factor de identificaci√≥n de equipo
        if equipment:
            confidence_factors.append(equipment.confidence)
        else:
            confidence_factors.append(0.5)

        # Factor de elementos detectados
        if elements:
            avg_element_confidence = sum(e.confidence for e in elements) / len(elements)
            confidence_factors.append(avg_element_confidence)
        else:
            confidence_factors.append(0.6)

        # Factor de estado determinado
        determined_states = sum(1 for state in status.values() if state != "unknown")
        state_confidence = determined_states / len(status)
        confidence_factors.append(state_confidence)

        # Factor de anomal√≠as (m√°s anomal√≠as = menos confianza en an√°lisis normal)
        anomaly_factor = max(0.3, 1.0 - (len(anomalies) * 0.1))
        confidence_factors.append(anomaly_factor)

        return sum(confidence_factors) / len(confidence_factors)

    def create_annotated_image(self, diagnostic: VisualDiagnostic) -> str:
        """Crear imagen anotada con resultados del an√°lisis"""
        image = cv2.imread(diagnostic.image_path)
        if image is None:
            return diagnostic.image_path

        # Convertir a RGB para anotaciones
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        pil_image = Image.fromarray(image_rgb)
        draw = ImageDraw.Draw(pil_image)

        # Colores para anotaciones
        colors = {
            "led": "red",
            "display": "blue",
            "connector": "green",
            "label": "purple"
        }

        # Anotar elementos detectados
        for element in diagnostic.visual_elements:
            x1, y1, x2, y2 = element.coordinates
            color = colors.get(element.element_type, "yellow")

            # Dibujar rect√°ngulo
            draw.rectangle([x1, y1, x2, y2], outline=color, width=2)

            # Agregar etiqueta
            label = f"{element.element_type}"
            if element.element_type == "led":
                label += f" ({element.properties.get('color', 'unknown')})"

            draw.text((x1, y1 - 15), label, fill=color)

        # Guardar imagen anotada
        annotated_path = diagnostic.image_path.replace('.jpg', '_annotated.jpg').replace('.png', '_annotated.png')
        pil_image.save(annotated_path)

        return annotated_path

def main():
    """Funci√≥n principal de demostraci√≥n"""
    print("=== SmartCompute Industrial - IA de An√°lisis Visual ===")
    print("Desarrollado por: ggwre04p0@mozmail.com")
    print("LinkedIn: https://www.linkedin.com/in/mart√≠n-iribarne-swtf/")
    print()

    # Inicializar sistema de IA visual
    visual_ai = SmartComputeVisualAI()

    # Crear imagen de demo
    demo_image_path = "reports/demo_plc_visual_analysis.jpg"
    Path("reports").mkdir(exist_ok=True)

    # Crear imagen simulada con elementos t√≠picos de PLC
    demo_image = np.zeros((480, 640, 3), dtype=np.uint8)

    # Simular PLC con LEDs de colores
    cv2.rectangle(demo_image, (200, 150), (500, 350), (100, 100, 100), -1)  # Cuerpo PLC
    cv2.circle(demo_image, (230, 180), 8, (0, 255, 0), -1)  # LED verde
    cv2.circle(demo_image, (230, 210), 8, (0, 0, 255), -1)  # LED rojo
    cv2.rectangle(demo_image, (300, 170), (450, 220), (50, 50, 50), -1)  # Display

    cv2.imwrite(demo_image_path, demo_image)

    try:
        # Ejecutar an√°lisis visual
        diagnostic = visual_ai.analyze_image(demo_image_path, "siemens s7-1214c")

        # Crear imagen anotada
        annotated_image = visual_ai.create_annotated_image(diagnostic)

        # Mostrar resultados
        print(f"\nüìä RESULTADOS DEL AN√ÅLISIS VISUAL:")
        print(f"  üîç Equipo identificado: {diagnostic.equipment_identified.manufacturer if diagnostic.equipment_identified else 'No identificado'}")
        print(f"  üìà Confianza general: {diagnostic.confidence_overall:.1%}")
        print(f"  ‚è±Ô∏è Tiempo de procesamiento: {diagnostic.processing_time:.2f}s")
        print(f"  üîß Elementos detectados: {len(diagnostic.visual_elements)}")
        print(f"  ‚ö†Ô∏è Anomal√≠as encontradas: {len(diagnostic.anomalies_detected)}")

        print(f"\nüìä ESTADO DE INDICADORES:")
        for indicator, state in diagnostic.status_indicators.items():
            status_icon = "‚úÖ" if state == "normal" else "‚ö†Ô∏è" if state in ["warning", "limited"] else "‚ùå" if state in ["fault", "active"] else "‚ùì"
            print(f"  {status_icon} {indicator.title()}: {state}")

        print(f"\nüîß RECOMENDACIONES:")
        for i, rec in enumerate(diagnostic.recommended_actions, 1):
            print(f"  {i}. {rec}")

        if diagnostic.anomalies_detected:
            print(f"\n‚ö†Ô∏è ANOMAL√çAS DETECTADAS:")
            for anomaly in diagnostic.anomalies_detected:
                print(f"  ‚Ä¢ {anomaly['type'].title()}: {anomaly['description']} (Confianza: {anomaly['confidence']:.0%})")

        # Guardar reporte JSON
        report_path = "reports/visual_analysis_report.json"
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(asdict(diagnostic), f, indent=2, default=str)

        print(f"\nüìÑ Reporte guardado: {report_path}")
        print(f"üñºÔ∏è Imagen anotada: {annotated_image}")

        print("\n‚úÖ AN√ÅLISIS VISUAL COMPLETADO")
        print("\nüí° Capacidades demostradas:")
        print("  ‚úÖ Identificaci√≥n autom√°tica de equipos")
        print("  ‚úÖ Detecci√≥n de LEDs y an√°lisis de estado")
        print("  ‚úÖ Reconocimiento de displays y conectores")
        print("  ‚úÖ Detecci√≥n de anomal√≠as visuales")
        print("  ‚úÖ Generaci√≥n de recomendaciones espec√≠ficas")
        print("  ‚úÖ C√°lculo de confianza del an√°lisis")

    except Exception as e:
        print(f"‚ùå Error en an√°lisis visual: {e}")

if __name__ == "__main__":
    main()