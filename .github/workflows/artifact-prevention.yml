name: "Artifact Prevention & Deep Scanning"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  prevent-artifacts:
    name: Prevent Artifact Reintroduction
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install scanning tools
      run: |
        pip install --upgrade pip
        pip install gitleaks bandit safety
        
    # Check for forbidden file patterns
    - name: Scan for forbidden artifacts
      run: |
        echo "üîç Scanning for forbidden artifacts..."
        
        # Define forbidden patterns
        FORBIDDEN_PATTERNS=(
          "*.db"
          "*.sqlite*"
          "*history.json"
          "smart_history.json"
          "test_history.json"
          "smartcompute_history.json"
          "venv/"
          "smartcompute_env/"
          "temp_env/"
          "*.log"
          "logs/"
          "app_logs/"
          "monitoring_logs/"
          "__pycache__/"
          "*.pyc"
          "build/"
          "dist/"
          "*.egg-info/"
          "node_modules/"
          "*.jar"
          "*.war"
          "*.run"
          "*.exe"
          "*.dmg"
          "*.deb"
          "*.rpm"
          "*.msi"
          "*.zip"
          "*.tar.gz"
          "*.7z"
          "*.rar"
        )
        
        # Check each pattern
        VIOLATIONS_FOUND=0
        for pattern in "${FORBIDDEN_PATTERNS[@]}"; do
          echo "Checking pattern: $pattern"
          if find . -path "./.git" -prune -o -name "$pattern" -type f -print | head -1 | grep -q .; then
            echo "‚ùå FORBIDDEN ARTIFACT FOUND: $pattern"
            find . -path "./.git" -prune -o -name "$pattern" -type f -print
            VIOLATIONS_FOUND=1
          fi
        done
        
        if [ $VIOLATIONS_FOUND -eq 1 ]; then
          echo "üö® CI FAILED: Forbidden artifacts detected!"
          echo "These files should not be committed to the repository."
          echo "Please remove them and add appropriate .gitignore rules."
          exit 1
        fi
        
        echo "‚úÖ No forbidden artifacts found"

    # Scan for large files
    - name: Scan for large files
      run: |
        echo "üîç Scanning for large files (>1MB)..."
        
        # Find files larger than 1MB (excluding .git)
        LARGE_FILES=$(find . -path "./.git" -prune -o -type f -size +1M -print)
        
        if [ -n "$LARGE_FILES" ]; then
          echo "‚ö†Ô∏è  Large files detected (>1MB):"
          echo "$LARGE_FILES" | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "  - $file ($size)"
          done
          
          # Fail if files are larger than 10MB
          VERY_LARGE_FILES=$(find . -path "./.git" -prune -o -type f -size +10M -print)
          if [ -n "$VERY_LARGE_FILES" ]; then
            echo "‚ùå Files larger than 10MB are not allowed:"
            echo "$VERY_LARGE_FILES"
            exit 1
          fi
          
          echo "‚ö†Ô∏è  Warning: Large files detected but under 10MB limit"
        else
          echo "‚úÖ No large files found"
        fi

    # Scan for sensitive data patterns
    - name: Scan for sensitive data
      run: |
        echo "üîç Scanning for sensitive data patterns..."
        
        # Common sensitive patterns
        grep -r -i --exclude-dir=.git \
          -E "(password|secret|key|token|credential|api_key|private_key)" . \
          --include="*.py" --include="*.json" --include="*.yaml" --include="*.yml" \
          --include="*.env" --include="*.config" --include="*.conf" || true
        
        # Check for hardcoded credentials
        python3 << 'EOF'
import re
import os
import sys

# Sensitive patterns
patterns = [
    r'password\s*=\s*["\'][^"\']+["\']',
    r'api_key\s*=\s*["\'][^"\']+["\']',
    r'secret\s*=\s*["\'][^"\']+["\']',
    r'token\s*=\s*["\'][^"\']+["\']',
    r'AKIA[0-9A-Z]{16}',  # AWS Access Key
    r'sk-[a-zA-Z0-9]{48}',  # OpenAI API key
    r'ghp_[a-zA-Z0-9]{36}',  # GitHub Personal Access Token
]

violations = []
for root, dirs, files in os.walk('.'):
    # Skip .git directory
    if '.git' in root:
        continue
    
    for file in files:
        if file.endswith(('.py', '.json', '.yaml', '.yml', '.env')):
            filepath = os.path.join(root, file)
            try:
                with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    for pattern in patterns:
                        matches = re.findall(pattern, content, re.IGNORECASE)
                        if matches:
                            violations.append(f"{filepath}: {pattern}")
            except Exception:
                continue

if violations:
    print("‚ùå Potential sensitive data found:")
    for violation in violations:
        print(f"  - {violation}")
    sys.exit(1)
else:
    print("‚úÖ No obvious sensitive data patterns found")
EOF

    # Scan git history for secrets
    - name: Scan git history with gitleaks
      run: |
        echo "üîç Scanning git history for secrets..."
        
        # Create gitleaks config
        cat > gitleaks.toml << 'EOF'
title = "SmartCompute Gitleaks Config"

[[rules]]
description = "API Key"
regex = '''[aA][pP][iI][_-]?[kK][eE][yY][_-]?[=:]\s*['\"]?[a-zA-Z0-9]{32,}['\"]?'''
tags = ["key", "api"]

[[rules]]
description = "Password"
regex = '''[pP][aA][sS][sS][wW][oO][rR][dD][_-]?[=:]\s*['\"]?[a-zA-Z0-9]{8,}['\"]?'''
tags = ["password"]

[[rules]]
description = "Secret"
regex = '''[sS][eE][cC][rR][eE][tT][_-]?[=:]\s*['\"]?[a-zA-Z0-9]{16,}['\"]?'''
tags = ["secret"]

[[rules]]
description = "Private Key"
regex = '''-----BEGIN [A-Z]+ PRIVATE KEY-----'''
tags = ["key", "private"]

[[rules]]
description = "AWS Access Key"
regex = '''AKIA[0-9A-Z]{16}'''
tags = ["aws", "key"]

[[rules]]
description = "JWT Token"
regex = '''eyJ[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*'''
tags = ["jwt", "token"]
EOF
        
        # Run gitleaks
        gitleaks detect --config gitleaks.toml --verbose --exit-code 1 || {
          echo "‚ùå Secrets found in git history!"
          exit 1
        }
        
        echo "‚úÖ No secrets found in git history"

    # Repository health check
    - name: Repository health check
      run: |
        echo "üìä Repository Health Check"
        echo "=========================="
        
        # Repository size
        REPO_SIZE=$(du -sh .git | cut -f1)
        echo "Repository size: $REPO_SIZE"
        
        # Commit count
        COMMIT_COUNT=$(git rev-list --all --count)
        echo "Total commits: $COMMIT_COUNT"
        
        # Branch info
        echo "Current branch: $(git branch --show-current)"
        echo "All branches: $(git branch -a | tr '\n' ' ')"
        
        # Recent commits
        echo ""
        echo "Recent commits:"
        git log --oneline -5
        
        # File count by type
        echo ""
        echo "File count by extension:"
        find . -name ".git" -prune -o -type f -print | 
        sed 's/.*\.//' | sort | uniq -c | sort -nr | head -10
        
        echo "‚úÖ Repository health check completed"

    # Generate scan report
    - name: Generate scan report
      if: always()
      run: |
        echo "üìã Artifact Prevention Scan Report" > scan_report.md
        echo "=================================" >> scan_report.md
        echo "" >> scan_report.md
        echo "- **Date**: $(date -u)" >> scan_report.md
        echo "- **Commit**: ${{ github.sha }}" >> scan_report.md
        echo "- **Branch**: ${{ github.ref_name }}" >> scan_report.md
        echo "- **Repository Size**: $(du -sh .git | cut -f1)" >> scan_report.md
        echo "" >> scan_report.md
        echo "## Scan Results" >> scan_report.md
        echo "- ‚úÖ Forbidden artifacts: PASSED" >> scan_report.md
        echo "- ‚úÖ Large file scan: PASSED" >> scan_report.md
        echo "- ‚úÖ Sensitive data scan: PASSED" >> scan_report.md
        echo "- ‚úÖ Git history secrets scan: PASSED" >> scan_report.md
        
        cat scan_report.md

    - name: Upload scan report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: artifact-prevention-report
        path: scan_report.md