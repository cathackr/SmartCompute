name: SmartCompute CI Enhanced

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-and-scan:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, '3.10', 3.11]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: smartcompute_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libpq-dev

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Set up test environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://postgres:test_password@localhost:5432/smartcompute_test" >> .env
          echo "PYTEST_CURRENT_TEST=true" >> .env
      
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Code formatting check
        run: |
          black --check --diff app/ || true

      - name: Import sorting check  
        run: |
          isort --check-only --diff app/ || true

      - name: Type checking
        run: |
          mypy app/ --ignore-missing-imports --no-strict-optional || true
      
      - name: Security scans
        run: |
          # Audit Python packages for known vulnerabilities
          safety check --json --output safety-report.json || true
          # Security linting (exclude test files and demos)
          bandit -r app/ -f json -o bandit-report.json --exclude "*/test_*,*/demo_*" || true
      
      - name: Run comprehensive tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term tests/test_simple_api.py tests/test_core_components.py -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: smartcompute-coverage
          fail_ci_if_error: false

      - name: Archive security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ matrix.python-version }}
          path: |
            safety-report.json
            bandit-report.json
            coverage.xml
      
      - name: Build Docker (no push)
        uses: docker/build-push-action@v4
        if: matrix.python-version == '3.11'
        with:
          context: .
          push: false
          tags: smartcompute:ci-test

      - name: Test Docker image
        if: matrix.python-version == '3.11'
        run: |
          docker run --rm smartcompute:ci-test python -c "import app; print('âœ… Docker build successful')"