version: '3.8'

services:
  # SmartCompute API Service
  smartcompute-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-1.0.0}
    container_name: smartcompute-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./data/smartcompute.db
      - LOG_LEVEL=INFO
      - MONITORING_ENABLED=true
    volumes:
      - smartcompute-data:/app/data
      - smartcompute-logs:/app/logs
      - smartcompute-reports:/app/reports
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - smartcompute-network

  # SmartCompute Monitoring Service (separate container for monitoring)
  smartcompute-monitor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smartcompute-monitor
    environment:
      - DATABASE_URL=sqlite:///./data/smartcompute.db
      - LOG_LEVEL=INFO
      - MONITORING_ONLY=true
    volumes:
      - smartcompute-data:/app/data
      - smartcompute-logs:/app/logs
      - smartcompute-reports:/app/reports
    restart: unless-stopped
    command: ["python", "main.py", "--monitor"]
    depends_on:
      smartcompute-api:
        condition: service_healthy
    networks:
      - smartcompute-network

  # Redis for caching and task queue (optional)
  redis:
    image: redis:7-alpine
    container_name: smartcompute-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - smartcompute-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for production database (optional alternative to SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: smartcompute-postgres
    environment:
      POSTGRES_USER: smartcompute
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-smartcompute_secure_password}
      POSTGRES_DB: smartcompute
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    networks:
      - smartcompute-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartcompute -d smartcompute"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: smartcompute-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/smartcompute.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx-logs:/var/log/nginx
      # SSL certificates (uncomment for HTTPS)
      # - ./ssl/cert.pem:/etc/nginx/ssl/cert.pem:ro
      # - ./ssl/key.pem:/etc/nginx/ssl/key.pem:ro
    depends_on:
      - smartcompute-api
    restart: unless-stopped
    networks:
      - smartcompute-network
    profiles:
      - production

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: smartcompute-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - smartcompute-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: smartcompute-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    restart: unless-stopped
    networks:
      - smartcompute-network
    profiles:
      - monitoring

volumes:
  smartcompute-data:
    driver: local
  smartcompute-logs:
    driver: local
  smartcompute-reports:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  smartcompute-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16