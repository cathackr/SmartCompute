version: '3.8'

# SmartCompute Quickstart Environment
# Complete development and testing environment with monitoring
# Usage: docker-compose -f docker-compose.quickstart.yml up -d

services:
  # SmartCompute main application
  smartcompute:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smartcompute-app
    ports:
      - "5000:5000"     # Main API
      - "8080:8080"     # Health monitoring
    environment:
      - ENVIRONMENT=quickstart
      - LOG_LEVEL=INFO
      - PROMETHEUS_ENABLED=true
      - MONITORING_INTERVAL=30
      - DATABASE_URL=sqlite:///app/data/smartcompute.db
    volumes:
      - smartcompute_data:/app/data
      - ./datasets:/app/datasets:ro
      - ./benchmark_results:/app/benchmark_results
    depends_on:
      - redis
      - prometheus
    networks:
      - smartcompute_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.smartcompute.rule=Host(`smartcompute.local`)"
      - "traefik.http.services.smartcompute.loadbalancer.server.port=5000"

  # Redis for distributed rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: smartcompute-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smartcompute_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: >
      redis-server 
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: smartcompute-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - smartcompute_net
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: smartcompute-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=smartcompute123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - smartcompute_net
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana image renderer for PDF/PNG exports
  renderer:
    image: grafana/grafana-image-renderer:3.8.0
    container_name: smartcompute-renderer
    ports:
      - "8081:8081"
    environment:
      ENABLE_METRICS: 'true'
      HTTP_PORT: 8081
    networks:
      - smartcompute_net
    restart: unless-stopped

  # AlertManager for alerting
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: smartcompute-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - smartcompute_net
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'

  # Nginx reverse proxy with load balancing
  nginx:
    image: nginx:alpine
    container_name: smartcompute-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - smartcompute
    networks:
      - smartcompute_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for advanced use cases (optional)
  postgres:
    image: postgres:15-alpine
    container_name: smartcompute-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: smartcompute
      POSTGRES_USER: smartcompute
      POSTGRES_PASSWORD: smartcompute_secure_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - smartcompute_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartcompute -d smartcompute"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:7.6
    container_name: smartcompute-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@smartcompute.com
      PGADMIN_DEFAULT_PASSWORD: smartcompute123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - smartcompute_net
    restart: unless-stopped

  # Jaeger for distributed tracing (advanced)
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: smartcompute-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      COLLECTOR_OTLP_ENABLED: true
    volumes:
      - jaeger_data:/tmp
    networks:
      - smartcompute_net
    restart: unless-stopped

  # Benchmark runner service
  benchmark:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smartcompute-benchmark
    environment:
      - BENCHMARK_MODE=true
      - OUTPUT_DIR=/app/benchmark_results
      - PROMETHEUS_PUSHGATEWAY=http://prometheus:9090
    volumes:
      - ./benchmark_results:/app/benchmark_results
      - ./datasets:/app/datasets:ro
    depends_on:
      - smartcompute
      - redis
    networks:
      - smartcompute_net
    restart: "no"  # Run once
    command: >
      sh -c "
        sleep 60 &&
        python tools/benchmark_engine.py --suite complete --parallel &&
        python tools/test_accuracy.py datasets/synthetic/basic_matrices.json
      "

  # Log aggregation with Loki (optional)
  loki:
    image: grafana/loki:2.9.0
    container_name: smartcompute-loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
    networks:
      - smartcompute_net
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: smartcompute-promtail
    volumes:
      - /var/log:/var/log:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - nginx_logs:/var/log/nginx:ro
    depends_on:
      - loki
    networks:
      - smartcompute_net
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml

volumes:
  smartcompute_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  jaeger_data:
    driver: local
  loki_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  smartcompute_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16