# =================================================================
# SMARTCOMPUTE NGINX REVERSE PROXY - CONFIGURACI√ìN SEGURA
# =================================================================
# üîí Termina TLS, rate limiting y proxy hacia servicios internos
# üö´ Bloquea acceso directo a puertos 8000-8003
# ‚úÖ Solo acceso via HTTPS con autenticaci√≥n

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=payment_limit:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=dashboard_limit:10m rate=30r/m;

# Upstream servers (solo localhost)
upstream smartcompute_dashboard {
    server 127.0.0.1:8000;
}

upstream smartcompute_unified {
    server 127.0.0.1:8001;
}

upstream smartcompute_network {
    server 127.0.0.1:8002;
}

upstream smartcompute_payment {
    server 127.0.0.1:8003;
}

# HTTPS Server Block
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name smartcompute.local localhost;

    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/smartcompute.crt;
    ssl_certificate_key /etc/nginx/ssl/smartcompute.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozTLS:10m;

    # Security Headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';";

    # Hide server info
    server_tokens off;

    # Log failed requests
    error_log /var/log/nginx/smartcompute_error.log warn;
    access_log /var/log/nginx/smartcompute_access.log combined;

    # Main Dashboard (Enterprise)
    location /enterprise {
        limit_req zone=dashboard_limit burst=10 nodelay;
        
        proxy_pass http://smartcompute_dashboard;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 30s;
    }

    # Unified Dashboard
    location /unified {
        limit_req zone=dashboard_limit burst=10 nodelay;
        
        proxy_pass http://smartcompute_unified;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Network Intelligence API
    location /api/network {
        limit_req zone=api_limit burst=5 nodelay;
        
        proxy_pass http://smartcompute_network;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Payment API (CR√çTICO - M√°xima restricci√≥n)
    location /api/payments {
        # üîí RESTRICCI√ìN M√ÅXIMA: Solo 5 requests por minuto
        limit_req zone=payment_limit burst=2 nodelay;
        
        # IP Whitelist (opcional - descomentar para restringir IPs)
        # allow 192.168.1.0/24;
        # allow 10.0.0.0/8;
        # deny all;
        
        proxy_pass http://smartcompute_payment;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Extra security for payments
        proxy_connect_timeout 3s;
        proxy_send_timeout 5s;
        proxy_read_timeout 10s;
    }

    # Health checks (sin rate limiting)
    location /health {
        proxy_pass http://smartcompute_dashboard/health;
        proxy_set_header Host $host;
        access_log off;
    }

    # Block direct access to ports
    location ~ ^/(8000|8001|8002|8003) {
        deny all;
        return 403;
    }

    # Default deny
    location / {
        return 301 https://$server_name/enterprise;
    }
}

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name _;
    return 301 https://$host$request_uri;
}

# Block direct access to internal ports
server {
    listen 8000 default_server;
    listen 8001 default_server;
    listen 8002 default_server;
    listen 8003 default_server;
    server_name _;
    return 403 "Direct access forbidden. Use HTTPS proxy.";
}