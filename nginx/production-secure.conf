# NGINX Configuration for SmartCompute Production with TLS
# Handles TLS termination, load balancing, and security headers

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# Load dynamic modules
load_module modules/ngx_http_realip_module.so;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    # Security logging format
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                       '"$http_x_forwarded_for" cert_verify=$ssl_client_verify '
                       'cert_subject="$ssl_client_s_dn" cert_serial=$ssl_client_serial';
    
    access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/security.log security;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Buffer settings
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    client_max_body_size 10m;
    large_client_header_buffers 4 16k;
    
    # Timeout settings
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=payment:10m rate=5r/m;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # SSL/TLS Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # OCSP stapling
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # DH parameters
    ssl_dhparam /etc/nginx/certs/dhparam.pem;
    
    # Security headers (default)
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Real IP configuration (for load balancer/CDN)
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    set_real_ip_from fc00::/7;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    
    # Upstream definitions
    upstream smartcompute_api {
        least_conn;
        server smartcompute-api:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream smartcompute_core {
        least_conn;
        server smartcompute-core:9000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }
    
    upstream smartcompute_payment {
        least_conn;
        server smartcompute-payment:9001 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }
    
    upstream smartcompute_dashboard {
        least_conn;
        server smartcompute-dashboard:3000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }
    
    # Redirect HTTP to HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name api.smartcompute.com dashboard.smartcompute.com smartcompute.com;
        
        # Security headers for HTTP
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        # Allow Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Redirect everything else to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
    
    # Main API Server (Public)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name api.smartcompute.com;
        
        # TLS Configuration
        ssl_certificate /etc/nginx/certs/server/smartcompute-nginx-cert.pem;
        ssl_certificate_key /etc/nginx/certs/server/smartcompute-nginx-key.pem;
        ssl_trusted_certificate /etc/nginx/certs/ca-truststore.pem;
        
        # Optional client certificate verification for sensitive endpoints
        ssl_client_certificate /etc/nginx/certs/ca-truststore.pem;
        ssl_verify_client optional;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https:; font-src 'self';" always;
        
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        limit_conn conn_limit_per_ip 20;
        
        # API endpoints
        location /api/v1/ {
            # Pass client certificate information to backend
            proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
            proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
            proxy_set_header X-SSL-Client-Subject $ssl_client_s_dn;
            proxy_set_header X-SSL-Client-Serial $ssl_client_serial;
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Proxy settings
            proxy_pass http://smartcompute_api/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        # Authentication endpoints (stricter rate limiting)
        location /api/v1/auth/ {
            limit_req zone=auth burst=5 nodelay;
            
            # Same proxy configuration as above
            proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
            proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
            proxy_set_header X-SSL-Client-Subject $ssl_client_s_dn;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_pass http://smartcompute_api/auth/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Health check endpoint
        location /health {
            proxy_pass http://smartcompute_api/health;
            access_log off;
        }
        
        # Security and status endpoints
        location /security/ {
            # Require client certificate for security endpoints
            if ($ssl_client_verify != SUCCESS) {
                return 403 "Client certificate required";
            }
            
            proxy_pass http://smartcompute_api/security/;
            proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
            proxy_set_header X-SSL-Client-Subject $ssl_client_s_dn;
        }
    }
    
    # Dashboard Server
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name dashboard.smartcompute.com;
        
        # TLS Configuration
        ssl_certificate /etc/nginx/certs/server/smartcompute-nginx-cert.pem;
        ssl_certificate_key /etc/nginx/certs/server/smartcompute-nginx-key.pem;
        ssl_trusted_certificate /etc/nginx/certs/ca-truststore.pem;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https: wss: ws:; font-src 'self' https:;" always;
        
        # Rate limiting for dashboard
        limit_req zone=api burst=50 nodelay;
        limit_conn conn_limit_per_ip 10;
        
        # Dashboard application
        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            proxy_pass http://smartcompute_dashboard/;
            proxy_http_version 1.1;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Enable caching for static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Content-Type-Options nosniff;
            }
        }
    }
    
    # Internal Core Service (mTLS required)
    server {
        listen 9443 ssl http2;
        server_name smartcompute-core.internal;
        
        # TLS Configuration with mandatory client certificates
        ssl_certificate /etc/nginx/certs/server/smartcompute-nginx-cert.pem;
        ssl_certificate_key /etc/nginx/certs/server/smartcompute-nginx-key.pem;
        ssl_client_certificate /etc/nginx/certs/ca-truststore.pem;
        ssl_verify_client on;  # Mandatory client certificates
        ssl_verify_depth 2;
        
        # No external access
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        # Security headers for internal service
        add_header Strict-Transport-Security "max-age=31536000" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        location / {
            # Pass client certificate information
            proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
            proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
            proxy_set_header X-SSL-Client-Subject $ssl_client_s_dn;
            proxy_set_header X-SSL-Client-Serial $ssl_client_serial;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_pass http://smartcompute_core/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }
    
    # Payment Service (Highly Secured with mTLS)
    server {
        listen 9444 ssl http2;
        server_name smartcompute-payment.internal;
        
        # TLS Configuration with mandatory client certificates
        ssl_certificate /etc/nginx/certs/server/smartcompute-nginx-cert.pem;
        ssl_certificate_key /etc/nginx/certs/server/smartcompute-nginx-key.pem;
        ssl_client_certificate /etc/nginx/certs/ca-truststore.pem;
        ssl_verify_client on;
        ssl_verify_depth 2;
        
        # Strictest access controls
        allow 172.18.0.0/16;  # Only internal Docker network
        deny all;
        
        # Additional security headers
        add_header Strict-Transport-Security "max-age=31536000" always;
        add_header Content-Security-Policy "default-src 'none';" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        
        # Stricter rate limiting for payment endpoints
        limit_req zone=payment burst=2 nodelay;
        limit_conn conn_limit_per_ip 5;
        
        location / {
            # Enhanced certificate validation for payments
            if ($ssl_client_verify != SUCCESS) {
                return 403 "Valid client certificate required";
            }
            
            # Pass detailed certificate information
            proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
            proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
            proxy_set_header X-SSL-Client-Subject $ssl_client_s_dn;
            proxy_set_header X-SSL-Client-Serial $ssl_client_serial;
            proxy_set_header X-SSL-Client-Fingerprint $ssl_client_fingerprint;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_pass http://smartcompute_payment/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Shorter timeouts for payment operations
            proxy_connect_timeout 3s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Disable buffering for real-time payment processing
            proxy_buffering off;
        }
    }
    
    # Default server (catch-all)
    server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        server_name _;
        
        # Self-signed certificate for unknown hosts
        ssl_certificate /etc/nginx/certs/server/localhost-cert.pem;
        ssl_certificate_key /etc/nginx/certs/server/localhost-key.pem;
        
        # Return 444 (close connection) for unknown hosts
        return 444;
    }
}

# Stream module for TCP/UDP load balancing (if needed)
stream {
    # PostgreSQL load balancing (if multiple DB instances)
    upstream postgres_backend {
        server smartcompute-postgres:5432 max_fails=3 fail_timeout=30s;
    }
    
    server {
        listen 5432;
        proxy_pass postgres_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_bind $remote_addr transparent;
    }
}